
<div id="app">
    <span id="myid"> </span>
</div>
<div class="alert alert-primary" role="alert" id="alerta">
  Uno de nuestros tecnicos te atendera enseguida, por favor espera!.
</div>
<div id="meeting" align="center"></div> 
<script src='https://meet.jit.si/external_api.js'></script>
<script src="https://js.pusher.com/7.0/pusher.min.js"></script>
<script>


	var pusher = new Pusher('aa627cb1dc3099475e48', {
        cluster: 'us2',
        useTLS: true,
        authEndpoint: '/videocall/auth'
    });
    var usersOnline, id, users = [],
        sessionDesc,
        currentcaller, room, caller, localUserMedia;
    const channel = pusher.subscribe('presence-videocall');
	
    channel.bind('pusher:subscription_succeeded', (members) => {
        //set the member count
        usersOnline = members.count;
        id = channel.members.me.id;
        document.getElementById('myid').innerHTML = ` My caller id is : ` + id;
        members.each((member) => {
            if (member.id != channel.members.me.id) {
                users.push(member.id)
            }
        });
        creaJitsi(id);
        
    })

    channel.bind('pusher:member_added', (member) => {
        users.push(member.id)
        
    });

    channel.bind('pusher:member_removed', (member) => {
        // for remove member from list:
        var index = users.indexOf(member.id);
        users.splice(index, 1);
        if (member.id == room) {
            endCall();
        }
        
    });
	
    function creaJitsi(myid){
        console.log(myid);
        document.getElementById("meeting").style.display = "none";
        const options = {
            parentNode: document.querySelector('#meeting'),
            roomName: 'supportbike' + myid,
            width: 700,
            height: 700,
            userInfo: {
                email: '{{user.email}}',
                displayName: '{{user.nombre}}'
            },
            configOverwrite: {
                defaultLanguage: 'es',
                noticeMessage:'En instantes uno de nuestros tecnicos atendera tu llamada',
                prejoinPageEnabled: false,
                enableInsecureRoomNameWarning: false,
            },
            interfaceConfigOverwrite: {

                DEFAULT_REMOTE_DISPLAY_NAME: 'Tecnico',
                MOBILE_APP_PROMO: false,
                HIDE_INVITE_MORE_HEADER: true,
                JITSI_WATERMARK_LINK: false,
                TOOLBAR_BUTTONS: [
                    'microphone', 'camera', 'closedcaptions', 'desktop','fullscreen',
                    'fodeviceselection', 'hangup', 'profile', 'chat', 'recording', 'etherpad', 'settings',
                    'videoquality', 'filmstrip','stats', 'shortcuts','tileview', 'download', 'help'
                ],
            },
            
        }
        meetAPI = new JitsiMeetExternalAPI("meet.jit.si", options);

        meetAPI.on('participantJoined', function(abc) {
		console.log( "Alguien se unio" );
        document.getElementById("meeting").style.display = "block";
        document.getElementById("alerta").style.display = "none";
	    });
    }
    

    //To iron over browser implementation anomalies like prefixes
    GetRTCPeerConnection();
    GetRTCSessionDescription();
    GetRTCIceCandidate();
    prepareCaller();
    function prepareCaller() {
        //Initializing a peer connection
        caller = new window.RTCPeerConnection();
        //Listen for ICE Candidates and send them to remote peers
        caller.onicecandidate = function (evt) {
            if (!evt.candidate) return;
            console.log("onicecandidate called");
            onIceCandidate(caller, evt);
        };
        //onaddstream handler to receive remote feed and show in remoteview video element
        caller.onaddstream = function (evt) {
            console.log("onaddstream called");
            if (window.URL) {
                document.getElementById("remoteview").srcObject = evt.stream;
            } else {
                document.getElementById("remoteview").src = evt.stream;
            }
        };
    }


    function GetRTCIceCandidate() {
        window.RTCIceCandidate = window.RTCIceCandidate || window.webkitRTCIceCandidate ||
            window.mozRTCIceCandidate || window.msRTCIceCandidate;

        return window.RTCIceCandidate;
    }

    function GetRTCPeerConnection() {
        window.RTCPeerConnection = window.RTCPeerConnection || window.webkitRTCPeerConnection ||
            window.mozRTCPeerConnection || window.msRTCPeerConnection;
        return window.RTCPeerConnection;
    }

    function GetRTCSessionDescription() {
        window.RTCSessionDescription = window.RTCSessionDescription || window.webkitRTCSessionDescription ||
            window.mozRTCSessionDescription || window.msRTCSessionDescription;
        return window.RTCSessionDescription;
    }

    //Create and send offer to remote peer on button click
    function callUser(user) {
        
    };

    function endCall() {
        room = undefined;
        caller.close();
        for (let track of localUserMedia.getTracks()) { track.stop() }
        prepareCaller();
        toggleEndCallButton();

    }



    function endCurrentCall() {

        channel.trigger("client-endcall", {
            "room": room
        });

        endCall();
    }

    //Send the ICE Candidate to the remote peer
    function onIceCandidate(peer, evt) {
        if (evt.candidate) {
            channel.trigger("client-candidate", {
                "candidate": evt.candidate,
                "room": room
            });
        }
    }

    function toggleEndCallButton() {
        if (document.getElementById("endCall").style.display == 'block') {
            document.getElementById("endCall").style.display = 'none';
        } else {
            document.getElementById("endCall").style.display = 'block';
        }
    }



    //Listening for the candidate message from a peer sent from onicecandidate handler
    channel.bind("client-candidate", function (msg) {
        if (msg.room == room) {
            console.log("candidate received");
            caller.addIceCandidate(new RTCIceCandidate(msg.candidate));
        }
    });

    //Listening for Session Description Protocol message with session details from remote peer
    channel.bind("client-sdp", function (msg) {
        if (msg.room == id) {

            console.log("sdp received");
            var answer = confirm("El tecnico: " + msg.from + "te quiere contactar, quieres aceptar?");
            if (!answer) {
                return channel.trigger("client-reject", { "room": msg.room, "rejected": id });
            }
            room = msg.room;
            getCam()
                .then(stream => {
                    localUserMedia = stream;
                    toggleEndCallButton();
                    if (window.URL) {
                        document.getElementById("selfview").srcObject = stream;
                    } else {
                        document.getElementById("selfview").src = stream;
                    }
                    caller.addStream(stream);
                    var sessionDesc = new RTCSessionDescription(msg.sdp);
                    caller.setRemoteDescription(sessionDesc);
                    caller.createAnswer().then(function (sdp) {
                        caller.setLocalDescription(new RTCSessionDescription(sdp));
                        channel.trigger("client-answer", {
                            "sdp": sdp,
                            "room": room
                        });
                    });

                })
                .catch(error => {
                    console.log('an error occured', error);
                })
        }


    });

    //Listening for answer to offer sent to remote peer
    channel.bind("client-answer", function (answer) {
        if (answer.room == room) {
            console.log("answer received");
            caller.setRemoteDescription(new RTCSessionDescription(answer.sdp));
        }

    });

    channel.bind("client-reject", function (answer) {
        if (answer.room == room) {
            console.log("Call declined");
            alert("call to " + answer.rejected + "was politely declined");
            endCall();
        }

    });

    channel.bind("client-endcall", function (answer) {
        if (answer.room == room) {
            console.log("Call Ended");
            endCall();

        }

    });

	

</script>
